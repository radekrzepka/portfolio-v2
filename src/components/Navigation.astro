---
import { Menu, X } from "lucide-react";

import { navLinks } from "../data/navigation";
import { ThemeToggle } from "./ThemeToggle.tsx";
---

<header
  class="fixed top-0 w-full z-50 transition-all duration-300 bg-background/80 backdrop-blur-md shadow-sm"
>
  <div class="flex h-16 items-center justify-between px-4 md:px-6">
    <a href="/" class="font-bold text-xl flex items-center gap-2">
      <span class="text-primary">Radosław</span>
      <span>Rzepka</span>
    </a>

    <nav class="hidden md:flex items-center gap-6">
      {
        navLinks.map((item) => (
          <a
            href={item.href}
            class="text-sm font-medium transition-colors hover:text-primary relative py-2"
          >
            {item.label}
          </a>
        ))
      }
      <ThemeToggle client:load />
    </nav>

    <div class="flex items-center gap-4 md:hidden">
      <ThemeToggle client:load />
      <button
        id="mobile-menu-toggle"
        class="flex items-center justify-center"
        aria-label="Przełącz menu"
        aria-expanded="false"
      >
        <Menu className="h-6 w-6" id="menu-icon" />
        <X className="h-6 w-6 hidden" id="close-icon" />
      </button>
    </div>
  </div>
</header>

<div
  id="mobile-menu"
  class="fixed inset-0 bg-background/80 backdrop-blur-sm z-[100] hidden w-full"
>
  <div class="flex flex-col h-full w-full">
    <div class="flex items-center justify-between h-16 px-6 border-b w-full">
      <a href="/" class="font-bold text-xl flex items-center gap-2">
        <span class="text-primary">Radosław</span>
        <span>Rzepka</span>
      </a>
      <button id="mobile-menu-close" aria-label="Zamknij menu">
        <X className="h-6 w-6" />
      </button>
    </div>

    <div class="flex flex-col items-center justify-center flex-1 p-6 w-full">
      <div class="flex flex-col items-center gap-12 w-full">
        {
          navLinks.map((item) => (
            <a
              href={item.href}
              class="text-3xl font-medium transition-colors hover:text-primary w-full text-center py-3"
            >
              {item.label}
            </a>
          ))
        }
      </div>
    </div>
  </div>
</div>

<script>
  const mobileMenuToggle = document.getElementById("mobile-menu-toggle");
  const mobileMenu = document.getElementById("mobile-menu");
  const menuIcon = document.getElementById("menu-icon");
  const closeIcon = document.getElementById("close-icon");
  const mobileMenuClose = document.getElementById("mobile-menu-close");

  if (
    mobileMenuToggle &&
    mobileMenu &&
    menuIcon &&
    closeIcon &&
    mobileMenuClose
  ) {
    const toggleMenu = (show: boolean) => {
      if (show) {
        mobileMenu.classList.remove("hidden");
        mobileMenu.classList.add("flex");
        menuIcon.classList.add("hidden");
        closeIcon.classList.remove("hidden");
        document.body.classList.add("overflow-hidden");
      } else {
        mobileMenu.classList.add("hidden");
        mobileMenu.classList.remove("flex");
        menuIcon.classList.remove("hidden");
        closeIcon.classList.add("hidden");
        document.body.classList.remove("overflow-hidden");
      }
      mobileMenuToggle.setAttribute("aria-expanded", show ? "true" : "false");
    };

    mobileMenuToggle.addEventListener("click", () => {
      const isExpanded =
        mobileMenuToggle.getAttribute("aria-expanded") === "true";
      toggleMenu(!isExpanded);
    });

    mobileMenuClose.addEventListener("click", () => {
      toggleMenu(false);
    });

    const mobileLinks = mobileMenu.querySelectorAll("a");
    mobileLinks.forEach((link) => {
      link.addEventListener("click", () => {
        toggleMenu(false);
      });
    });

    document.addEventListener("keydown", (e) => {
      if (
        e.key === "Escape" &&
        mobileMenuToggle.getAttribute("aria-expanded") === "true"
      ) {
        toggleMenu(false);
      }
    });
  }
</script>
