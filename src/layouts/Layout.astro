---
import Analytics from "@vercel/analytics/astro";
import SpeedInsights from "@vercel/speed-insights/astro";

import Navigation from "@/components/navigation/Navigation.astro";
import Footer from "@/layouts/Footer.astro";

import "./../styles/global.css";

interface Props {
  title: string;
  description?: string;
}

const {
  title,
  description = "Full-stack developer specjalizujący się w Next.js, React, TypeScript, AWS i Nest.js.",
} = Astro.props;
---

<!doctype html>
<html lang="pl" class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <Analytics />
    <SpeedInsights />

    <script is:inline>
      const getThemePreference = () => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      };

      const isDark = getThemePreference() === "dark";
      document.documentElement.classList[isDark ? "add" : "remove"]("dark");

      if (typeof localStorage !== "undefined") {
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains("dark");
          localStorage.setItem("theme", isDark ? "dark" : "light");
        });
        observer.observe(document.documentElement, {
          attributes: true,
          attributeFilter: ["class"],
        });
      }
    </script>
  </head>
  <body class="flex flex-col min-h-screen">
    <Navigation />
    <main class="flex-grow">
      <slot />
    </main>
    <Footer />
    <style is:global>
      html,
      body {
        min-height: 100vh;
      }

      body {
        background-attachment: fixed;
        background-image:
          radial-gradient(
            circle at 10% 10%,
            rgba(100, 149, 237, 0.15) 0%,
            transparent 50%
          ),
          radial-gradient(
            circle at 90% 20%,
            rgba(123, 104, 238, 0.15) 0%,
            transparent 55%
          ),
          radial-gradient(
            circle at 50% 90%,
            rgba(72, 209, 204, 0.15) 0%,
            transparent 60%
          );
        position: relative;
        overflow-x: hidden;
      }

      body::before {
        content: "";
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        height: 1px;
        background: linear-gradient(
          90deg,
          transparent,
          rgba(0, 0, 0, 0.2),
          transparent
        );
        z-index: 1;
      }

      html.dark body {
        background-attachment: fixed;
        background-image:
          radial-gradient(
            circle at 10% 10%,
            rgba(111, 66, 193, 0.25) 0%,
            transparent 50%
          ),
          radial-gradient(
            circle at 90% 20%,
            rgba(220, 20, 60, 0.15) 0%,
            transparent 55%
          ),
          radial-gradient(
            circle at 50% 90%,
            rgba(65, 105, 225, 0.15) 0%,
            transparent 60%
          );
      }

      html.dark body::before {
        background: linear-gradient(
          90deg,
          transparent,
          rgba(255, 255, 255, 0.2),
          transparent
        );
      }
    </style>
  </body>
</html>
